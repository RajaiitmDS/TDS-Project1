name: Deploy TDS Virtual TA

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      env:
        AIPIPE_TOKEN: "test-token"
        SESSION_SECRET: "test-secret"
      run: |
        python3 << 'EOF'
        import sys
        sys.path.append('.')
        
        try:
            from app import app
            from api import VirtualTAAPI
            from data_store import DataStore
            from scraper import DiscourseScraperTDS
            print('✓ All modules imported successfully')
        except ImportError as e:
            print(f'✗ Import error: {e}')
            sys.exit(1)
        
        try:
            ds = DataStore()
            result = ds.search_content('pandas')
            print(f'✓ Data store working: found {len(result.get("discourse_posts_detailed", []))} relevant posts')
        except Exception as e:
            print(f'✗ Data store error: {e}')
            sys.exit(1)
        
        print('All tests passed!')
        EOF

  build-pages:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build static site for GitHub Pages
      run: |
        mkdir -p build
        cp -r static build/
        cp -r templates build/
        
        python3 << 'EOF'
        with open('templates/index.html', 'r') as f:
            content = f.read()
        
        content = content.replace("{{ url_for('static', filename='style.css') }}", 'static/style.css')
        content = content.replace("{{ url_for('static', filename='script.js') }}", 'static/script.js')
        
        with open('build/index.html', 'w') as f:
            f.write(content)
        
        print('Static site built successfully')
        EOF

    - name: Add demo API responses
      run: |
        cat >> build/static/script.js << 'EOF'
        
        // Demo API for GitHub Pages
        const demoResponses = {
          "pandas": {
            "answer": "DataFrames are the core data structure in pandas. Create with pd.DataFrame(), read CSV with pd.read_csv(). Filter data with df[df['column'] > value]. Group data with df.groupby(). Essential for data manipulation in Python.",
            "links": [{"url": "https://discourse.onlinedegree.iitm.ac.in/t/pandas-dataframe-operations/155945", "text": "Pandas DataFrame Operations"}]
          },
          "virtual environment": {
            "answer": "Use 'python -m venv myenv' to create, 'source myenv/bin/activate' (Linux/Mac) or 'myenv\\Scripts\\activate' (Windows) to activate. Install packages with pip after activation. Essential for project isolation.",
            "links": [{"url": "https://discourse.onlinedegree.iitm.ac.in/t/python-environment-setup-issues/155940", "text": "Python Environment Setup"}]
          },
          "api": {
            "answer": "Use Flask: @app.route('/api/', methods=['POST']) for endpoints. Handle JSON with request.get_json(). Return with jsonify(). Always validate input data for secure API development.",
            "links": [{"url": "https://discourse.onlinedegree.iitm.ac.in/t/flask-api-development-tutorial/155944", "text": "Flask API Development"}]
          }
        };
        
        const originalFetch = window.fetch;
        window.fetch = function(url, options) {
          if (url === '/api/') {
            const data = JSON.parse(options.body);
            const question = data.question.toLowerCase();
            let response = null;
            
            for (const [key, value] of Object.entries(demoResponses)) {
              if (question.includes(key)) {
                response = value;
                break;
              }
            }
            
            if (!response) {
              response = {
                "answer": "Demo version - Try asking about: pandas, virtual environment, or API development. For full AI responses, visit the Render deployment.",
                "links": []
              };
            }
            
            return Promise.resolve({
              ok: true,
              json: () => Promise.resolve(response)
            });
          }
          return originalFetch.apply(this, arguments);
        };
        EOF

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: './build'

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-pages
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
